@model List<Services.ServiceModels.AppointmentDTO>
@{
    Layout = "/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Appointments</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
      

        .container {
            max-width: 800px;
            background-color: #fff;
            padding: 30px;
            height:100vh;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .filter-container {
            margin-bottom: 20px;
        }

        .filter-btn {
            background-color: #fff;
            border: 1px solid teal;
            padding: 8px 16px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            border-radius: 20px;
            transition: all 0.3s ease;
        }

        .scheduled-btn {
            color: #007bff;
            border: 1px solid #007bff;
        }

        .cancelled-btn {
            color: #dc3545;
            border: 1px solid #dc3545;
        }

        .completed-btn {
            color: #28a745;
            border: 1px solid #28a745;
        }

        .scheduled-btn.active {
            color: white;
            background-color: #007bff;
        }

        .cancelled-btn.active {
            color: white;
            background-color: #dc3545;
        }

        .completed-btn.active {
            color: white;
            background-color: #28a745;
        }

        .appointment-list {
            list-style: none;
            padding: 0;
        }

        .appointment-item {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 10px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }

        .scheduled {
            background-color: rgba(0, 123, 255, 0.1);
            color: #007bff;
        }

        .cancelled {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .completed {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        .view{
            border:none;
            background-color:rgba(255,255,255,0.0);
            float:right;
            padding-left:40px;
        }

        .bi-eye-fill {
            color: #007bff;
        }

       
        .appointment-container {
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            padding: 10px;
            margin-bottom: 10px;
        }

       
        .appointment-header {
            font-size: 18px;
            margin-bottom: 10px;
        }

        
        .appointment-details {
            margin-bottom: 10px;
        }

       
        .patient-details {
            margin-bottom: 10px;
        }

        
        .doctor-details {
            margin-bottom: 10px;
        }

        
        .notes-section {
            margin-bottom: 10px;
        }

       
        .button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            margin-left:4px;
        }

        
        .doctor-header {
            font-size: 16px;
            margin-bottom: 5px;
        }
       
        .details-container {
            border: 1px solid #ccc;
            background-color: #f9f9f9;
            padding: 10px;
            margin-bottom: 10px;
        }

        
        .details-header {
            font-size: 20px;
            margin-bottom: 5px;
            font-weight: bold;
        }

       
        .detail-item {
            margin-bottom: 5px;
        }

        
        .name {
            font-weight: bold;
        }

        
        .contact-info {
            font-style: italic;
        }

        
        .address {
            font-size: 14px;
        }

    </style>
</head>
<body>
    <div class="container my-5">
        <h1 class="text-center mb-4">My Appointments</h1>
        <div class="filter-container d-flex justify-content-center">
            <button class="filter-btn active" data-status="all">All</button>
            <button class="filter-btn scheduled-btn" data-status="scheduled">Scheduled</button>
            <button class="filter-btn cancelled-btn" data-status="cancelled">Cancelled</button>
            <button class="filter-btn completed-btn" data-status="completed">Completed</button>
        </div>
        <div class="no-appointments text-center" style="display: none;">
            No appointments to show.
        </div>
            @if (Model.Count > 0)
            {
                    <ul class="appointment-list">
                    @foreach (var appointment in Model)
                    {
                    <li class="appointment-item @appointment.Status.ToLower()">
                        @appointment.AppointmentsDateTime.ToString("dd-MM-yyyy") -  @appointment.AppointmentsDateTime.ToString("HH:mm")  with Dr. @appointment.DoctorName
                        <button class="view" data-appointment-id="@appointment.AppointmentId"><i class="bi bi-eye-fill"></i></button></li>
                    }
                    </ul>
            }
            else
            {
                <p>No appointments To Show.</p>
            }
       
    </div>

    <div id="appointmentDetailsModal" class="modal " tabindex="-1" style="display: none;overflow:auto">
        <div class="modal-dialog modal-dialog-centered ">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"></h5>
                    <button type="button" class="close btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="appointmentDetails"></div>
                </div>
            </div>
        </div>
    </div>
    <script>

        function displayAppointmentDetails(appointment,role){
            appointmentDetails.innerHTML = "";

            const appointmentDate = new Date(appointment.AppointmentDateTime);
            console.log(appointmentDate.getDate());

            //appointment header
            const appointmentDiv = document.createElement('div');
            const appointmentHeader = document.createElement('h6');
            appointmentHeader.textContent = `Date and Time : ${appointmentDate.getDate()}-${appointmentDate.getMonth() + 1}-${appointmentDate.getFullYear()} - ${appointmentDate.getHours()}:${appointmentDate.getMinutes()}`;
            if (appointmentDate.getMinutes() === 0)
            {
                appointmentHeader.textContent += "0";
            }  
            appointmentDiv.appendChild(appointmentHeader);
           

            const status = document.createElement('h6');
            status.textContent = `Status : ${appointment.Status}`;
            appointmentDiv.appendChild(status);

            const notesHeader = document.createElement('h6');
            notesHeader.textContent = "Notes : ";
            const notes = document.createElement('p');
            if(appointment.Notes === "")
            {
                notes.textContent = `no notes added`;
            }
            else
            {
                notes.textContent = appointment.Notes;
            }
            notes.id = "notes";
            const notesText = document.createElement('textarea');
            notesText.ariaPlaceholder = "write you notes..";
            notesText.id = "notes-text";

            const addNotesButton = document.createElement('button');
            addNotesButton.textContent = "Add Notes";
            addNotesButton.dataset.appointmentId = `${appointment.AppointmentId}`;

            notesHeader.appendChild(notes);
            notesHeader.appendChild(notesText);
            notesHeader.appendChild(addNotesButton);

            appointmentDiv.appendChild(notesHeader);

            appointmentDetails.appendChild(appointmentDiv);

            //Patient Header
            const patientDiv = document.createElement('div');

            const patientHeader = document.createElement('h6');
            patientHeader.textContent = "Patient Details : ";
            patientDiv.appendChild(patientHeader);

            console.log(appointment.PatientName);
            const name = document.createElement('h6');
            name.textContent = `Name : ${appointment.PatientName}`;
            patientDiv.appendChild(name);

            const phoneNumber = document.createElement('h6');
            phoneNumber.textContent = `Phone Number : ${appointment.PatientPhoneNumber}`;
            patientDiv.appendChild(phoneNumber);

            const email = document.createElement('h6');
            email.textContent = `Email : ${appointment.PatientEmail}`;
            patientDiv.appendChild(email);

            const address= document.createElement('h6');
            address.textContent = `Address : ${appointment.PatientAddress}`;
            patientDiv.appendChild(address);
            appointmentDetails.appendChild(patientDiv);

            // Doctor Header
            const doctorDiv = document.createElement('h6');

            const doctorHeader = document.createElement('h6');
            doctorHeader.textContent = "Doctor's Details:";
            doctorDiv.appendChild(doctorHeader);


            const doctorName = document.createElement('h6');
            doctorName.textContent = `Name : ${appointment.DoctorsDetail.FirstName} ${appointment.DoctorsDetail.LastName}`;
            doctorDiv.appendChild(doctorName);

            const doctorSpecialization = document.createElement('h6');
            doctorSpecialization.textContent = `Specialiaztion : ${appointment.DoctorsDetail.Specialization}`;
            doctorDiv.appendChild(doctorSpecialization);

            const doctorPhoneNumber = document.createElement('h6');
            doctorPhoneNumber.textContent = `Phone Number : ${appointment.DoctorsDetail.PhoneNumber}`;
            doctorDiv.appendChild(doctorPhoneNumber);

            const doctorEmail = document.createElement('h6');
            doctorEmail.textContent = `Email : ${appointment.DoctorsDetail.Email}`;
            doctorDiv.appendChild(doctorEmail);

            const doctorAddress = document.createElement('h6');
            doctorAddress.textContent = `Address : ${appointment.DoctorsDetail.Address}`;
            doctorDiv.appendChild(doctorAddress);
           
            appointmentDetails.appendChild(doctorDiv);

            if( appointment.Status === "scheduled")
            {
                const cancelAppointmentButton = document.createElement('button');
                cancelAppointmentButton.textContent = "Cancel Appointment";
                cancelAppointmentButton.dataset.appointmentId = `${appointment.AppointmentId}`;
                appointmentDetails.appendChild(cancelAppointmentButton);
                cancelAppointmentButton.classList.add('button','cancel-appointment');
            }
             if (role === "doctor" && appointment.Status === "scheduled") {
                const completeAppointmentButton = document.createElement('button');
                completeAppointmentButton.textContent = "Cancel Appointment";
                completeAppointmentButton.dataset.appointmentId = `${appointment.AppointmentId}`;
                appointmentDetails.appendChild(completeAppointmentButton);
                completeAppointmentButton.classList.add('button','complete-appointment');
            }
             
            // For Appointment details
            appointmentDiv.classList.add('appointment-container');
            appointmentHeader.classList.add('appointment-header');
            patientDiv.classList.add('patient-details');
            doctorDiv.classList.add('doctor-details');
            notesHeader.classList.add('notes-section');
            addNotesButton.classList.add('button','add-notes');
            doctorHeader.classList.add('doctor-header');

            // For patient details
            patientDiv.classList.add('details-container');
            patientHeader.classList.add('details-header');
            name.classList.add('detail-item', 'name');
            phoneNumber.classList.add('detail-item', 'contact-info');
            email.classList.add('detail-item', 'contact-info');
            address.classList.add('detail-item', 'address');

            // For doctor details
            doctorDiv.classList.add('details-container');
            doctorHeader.classList.add('details-header');
            doctorName.classList.add('detail-item', 'name');
            doctorSpecialization.classList.add('detail-item');
            doctorPhoneNumber.classList.add('detail-item', 'contact-info');
            doctorEmail.classList.add('detail-item', 'contact-info');
            doctorAddress.classList.add('detail-item', 'address');


        }

        $(document).ready(function () {
            let userRole = "";
            $.ajax({
                url: '/Auth/GetLoggedInUser',
                type: 'GET',
                success: function (data) {

                    const loggedUser = JSON.parse(data);
                    userRole = loggedUser.Role;
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error('Error occurred while retrieving logged-in user:', errorThrown);
                }
            });

            $(document).on("click", ".filter-btn", function () {
                const selectedStatus = $(this).data("status");
                const filterButtons = document.querySelectorAll('.filter-btn');


                filterButtons.forEach(function (button) {
                    $(button).removeClass('active');
                
                });

               
                $(this).addClass('active');

                let appointmentCount = 0;
                $('.appointment-item').each(function () {
                    if (selectedStatus === 'all' || $(this).hasClass(selectedStatus)) {
                        appointmentCount++;
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });

                if (appointmentCount === 0) {
                    $('.no-appointments').show();
                } else {
                    $('.no-appointments').hide();
                }
            });
             
            $(document).on("click", ".view", function () {

                $("#appointmentDetailsModal").modal('show');
                const appointmentId = $(this).data("appointment-id");
                const modalTitle = document.querySelector('.modal-title');
                modalTitle.innerHTML = "Appointment Details :";
                
                $.ajax({
                    url: "/Patient/ViewAppointment",
                    type: "GET",
                    data: { appointmentId: appointmentId },
                    success: function (response) {
                       const appointment = JSON.parse(response);
                        console.log(appointment);
                        displayAppointmentDetails(appointment,userRole);
                        $("#appointmentDetailsModal").modal('show');
                    },
                    error: function (xhr, status, error) {

                    }
                });
            });
            $(document).on("click", function (event) {
                if ($(event.target).closest("#appointmentDetailsModal").length === 0) {
                    $("#appointmentDetailsModal").modal('hide');
                }
            });

            //Notes
            $(document).on("click", ".add-notes", function () {
                const appointmentId = $(this).data("appointment-id");
                const notes = document.getElementById('notes-text').value;
                $.ajax({
                    url: '/Patient/AddAppointmentNotes',
                    type: 'PUT',
                    data: {
                        appointmentId: appointmentId,
                        notes:notes
                    },
                    success: function (response) {

                        document.getElementById('notes').textContent = response;
                    },
                    error: function (xhr, status, error) {
                        console.error('Error adding Notes:', error);

                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while adding notes to  the appointment. Please try again later.',
                            showCloseButton: true,
                        });
                    }
                });
            });

            //Cancel
            $(document).on("click", ".cancel-appointment", function () {
                const appointmentId = $(this).data("appointment-id");
               

                $.ajax({
                    url: '/Patient/CancelAppointment',
                    type: 'PUT',
                    data: {
                       appointmentId: appointmentId
                    },
                    success: function () {
                        
                        Swal.fire({
                            icon: 'success',
                            title: 'Appointment Cancelled!',
                            html: 'Your appointment has been cancelled successfully.<br><a href="/Patient/Appointments">Check Your Appointments</a>',
                            showCloseButton: true,
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload(true);
                            } else if (result.dismiss === Swal.DismissReason.close) {
                                location.reload(true);
                            }
                        });;
                        
                    },
                    error: function (xhr, status, error) {
                        console.error('Error booking appointment:', error);

                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while cancelling the appointment. Please try again later.',
                            showCloseButton: true,
                        });
                    }
                });
            });


            //Complete
            $(document).on("click", ".complete-appointment", function () {
                const appointmentId = $(this).data("appointment-id");


                $.ajax({
                    url: '/Patient/CompleteAppointment',
                    type: 'PUT',
                    data: {
                        appointmentId: appointmentId
                    },
                    success: function () {

                        Swal.fire({
                            icon: 'success',
                            title: 'Appointment Completed!',
                            html: ' Appointment has been completed successfully.<br><a href="/Patient/Appointments">Check Your Appointments</a>',
                            showCloseButton: true,
                        }).then((result) => {
                            if (result.isConfirmed) {
                                location.reload(true);
                            } else if (result.dismiss === Swal.DismissReason.close) {
                                location.reload(true);
                            }
                        });;

                    },
                    error: function (xhr, status, error) {
                        console.error('Error booking appointment:', error);

                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'An error occurred while cancelling the appointment. Please try again later.',
                            showCloseButton: true,
                        });
                    }
                });
            });

        });

    </script>
</body>
</html>

















